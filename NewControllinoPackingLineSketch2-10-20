//Sample using LiquidCrystal library


#include <SPI.h>
#include <Controllino.h>
#include <LiquidCrystal.h>
#include <HX711.h>
using namespace std;
/*******************************************************

This program will test the LCD panel and the buttons

********************************************************/

// select the pins used on the LCD panel
//LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
LiquidCrystal lcd(8, 9, 53, 51, 50, 52);  //1, 0 

HX711 scale;
float calibration_factor = 39445.5;

// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5

#define PAUSE_MENU 0
#define FULL_ON 1				//scuppers open, top and bottom vibes on FULL													
#define DUTY_CYCLE_75 2			//scuppers open, vibes on dutyCycle OR PWM
#define DUTY_CYCLE_50 3			//scuppers open, vibes on dutyCycle OR PWM
#define DUTY_CYCLE_25 4 			//main scupper closes, vibes on dutyCycle/PWM
#define CLOSE_MAIN_SCUPPER 5
#define DUMP_WEIGHT_REACHED_STOP_AND_SETTLE 6 //close all scuppers, stop all vibes, run twoSecond(), dumpWeightReached = true
#define CHECK_ELEVATOR_AND_BOX 8 //
#define CLOSE_AND_OPEN_DUMP_FLAP 9  // maybe a repeat tap for extra shake complete emptying
#define DUMP_CYCLE  10				//
#define SETTLE_VERIFY_ZERO_AND_TARE 12


const int DOUT = 17;
const int CLK = 16;
double weight = 0;
int dutyCycleTime = 8000;
unsigned long onCycleStart = 0;
unsigned long offCycleStart = 0;
unsigned long oneSecondStart = 0;
bool floorVibeState = 0;
byte dutyCycleSeconds8642 = 0;
int dutyPercent[] = { 8000, 6000, 4000, 2000};
volatile int offCycleDuration = 0;
volatile int onCycleDuration = 0;
int lastDetermineState = 0;
double dumpWeight = 50.03;
double finalTrickleWeight = 49.25;
double mainScupperActuateWeight = 48.75;

// function prototypes
void floorVibeDutyCycleOn();
void floorVibeDutyCycleOff();
void dutyCycleToggle();
int scaleBasedDutyReturn();
void dumping();
bool oneSecondTimer();
bool dumpWeightReached = false;



// read the buttons
int read_LCD_buttons()
{
	adc_key_in = analogRead(11);      // read the value from the sensor 
	// my buttons when read are centered at these valies: 0, 144, 329, 504, 741
	// we add approx 50 to those values and check to see if we are close
	if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
	// For V1.1 us this threshold
	/*
	if (adc_key_in < 50)   return btnRIGHT;
	if (adc_key_in < 250)  return btnUP;
	if (adc_key_in < 450)  return btnDOWN;
	if (adc_key_in < 650)  return btnLEFT;
	if (adc_key_in < 850)  return btnSELECT;
   */
   // For V1.0 comment the other threshold and use the one below:

	if (adc_key_in < 50)   return btnRIGHT;
	if (adc_key_in < 195)  return btnUP;
	if (adc_key_in < 280)  return btnDOWN;
	if (adc_key_in < 350)  return btnLEFT;
	if (adc_key_in < 590)  return btnSELECT;
	return btnNONE;  // when all others fail, return this...
}

void setup()
{
	Serial.begin(9600);
	scale.begin(DOUT, CLK);
	int zero_factor = scale.read_average();
	Serial.print("zero factor: ");
	Serial.println(zero_factor);
	scale.set_scale(calibration_factor);
	Serial.print("calibration factor: ");
	Serial.println(calibration_factor);
	lcd.begin(16, 2);              // start the library
	lcd.setCursor(0, 0);
	lcd.print("Acorn's Awesome Packing Line"); // print a simple message
	//delay(150);
	for (int positionCounter = 0; positionCounter < 40; positionCounter++) {
		// scroll one position right:
		lcd.scrollDisplayLeft();
		// wait a bit:
		delay(50);
	}
	scale.tare();
	pinMode(CONTROLLINO_D0, OUTPUT);
	pinMode(CONTROLLINO_D1, OUTPUT);  // note that we are using CONTROLLINO aliases for the digital outputs
	pinMode(CONTROLLINO_D2, OUTPUT);
	pinMode(CONTROLLINO_D3, OUTPUT);  // the alias is always like CONTROLLINO_
	pinMode(CONTROLLINO_D4, OUTPUT);  // and the digital output label as you can see at the CONTROLLINO device
	pinMode(CONTROLLINO_D5, OUTPUT);  // next to the digital output screw terminal
	pinMode(CONTROLLINO_D6, OUTPUT);
	pinMode(CONTROLLINO_AO0, OUTPUT);
	pinMode(CONTROLLINO_R2, OUTPUT);
}

bool oneSecondTimer() {
	if (millis() - oneSecondStart > 1000) return true;
	else return false;
}

int scaleBasedDutyReturn() {
	if (scale.get_units() < 5) return 0;  // < 47
	if (scale.get_units() < 8) return 1;   //  47 - 48.5
	if (scale.get_units() < 10) return 2;   // 48.5 - 49.25
	if (scale.get_units() < 13) return 3;
	else return 4;
}

int determineState() {
	if (dumpWeightReached == true) return 7;
	if (scale.get_units() >= dumpWeight) return 6;
	if (scale.get_units() >= finalTrickleWeight) return 5;
	if (scale.get_units() >= mainScupperActuateWeight) return 4;

}

void floorVibeDutyCycleOn() {
		digitalWrite(CONTROLLINO_R2, HIGH);
		onCycleStart = millis();
		floorVibeState = 1;
		return;	
}
void floorVibeDutyCycleOff() {
		digitalWrite(CONTROLLINO_R2, LOW);
		offCycleStart = millis();
		floorVibeState = 0;
		return;
}



void dutyCycleToggle() {
	//scaleBasedDutyReturn();
	//if (determineState() == 1) {
		//floorVibeDutyCycleOn();
		//return;
	//}
	switch (floorVibeState)
		
	{
		
	case 0: {  //its off and waiting for turning it back on
		if ((millis() - offCycleStart) < offCycleDuration)
		{

			break;
		}
		//Serial.println("time to turn the floor vibes ON");
		//Serial.println(millis());
		floorVibeDutyCycleOn();
		break;
	}
	case 1: {
		if ((millis() - onCycleStart) < onCycleDuration)
		
		{
			
			break;
		}
		//Serial.println("time to shut the floor vibes off");
		//Serial.println(millis());
		floorVibeDutyCycleOff();
		break;
	}
	}
}


/*
void loop()
{
	dutyCycleToggle(); // should only be called in states above 47 pounds
	//Serial.println(scale.get_units(), 2);
	lcd.setCursor(10, 1);            // move cursor to second line "1" and 9 spaces over
	if (scale.get_units() > 0.1) {
		lcd.print(scale.get_units(), 2);      // display seconds elapsed since power-up
	}
	else lcd.print("zero ");

	lcd.setCursor(0, 1);            // move to the begining of the second line


	lcd_key = read_LCD_buttons();  // read the buttons
	switch (lcd_key)               // depending on which button was pushed, we perform an action
	{
	case btnRIGHT:
	{
		lcd.print("RIGHT ");
		digitalWrite(CONTROLLINO_R2, HIGH);
		break;
	}
	case btnLEFT:
	{
		digitalWrite(CONTROLLINO_R2, LOW);
		// if You need the word "LEFT " shown on the display than use lcd.print("LEFT  ") instead of      lcd.print(adc_key_in) and lcd.print(" v");
		// the following 2 lines will print the actual threshold voltage present at analog input 0 ; As these buttons are part of a voltage divider, pressing each button creates a different threshold voltage 

		lcd.print("LEFT   "); // shows the actual threshold voltage at analog input 0
		lcd.print(" v"); // ends with v(olt) 
		break;
	}
	case btnUP:
	{
		lcd.print("UP    ");
		dutyPercent[1] = (dutyPercent[1] + .05);
		dutyPercent[2] = (dutyPercent[2] + .05);
		dutyPercent[3] = (dutyPercent[3] + .05);
		//Serial.println(dutyPercent[1]);
		//Serial.println(dutyPercent[2]);
		//Serial.println(dutyPercent[3]);
		delay(200);
		break;
	}
	case btnDOWN:
	{
		lcd.print("DOWN  ");
		dutyPercent[1] = (dutyPercent[1] - .05);
		dutyPercent[2] = (dutyPercent[2] - .05);
		dutyPercent[3] = (dutyPercent[3] - .05);
		//Serial.println(dutyPercent[1]);
		//Serial.println(dutyPercent[2]);
		//Serial.println(dutyPercent[3]);
		delay(200);
		break;
	}
	case btnSELECT:
	{
		lcd.print("SELECT");
		analogWrite(CONTROLLINO_AO0, 192);
		delay(2000);
		analogWrite(CONTROLLINO_AO0, 0);
		break;
	}
	case btnNONE:
	{
		lcd.print("TEST  ");
		break;
	}
	}

}
*/



void runStateMachine()
{

	switch (determineState())

	{
			case FULL_ON:      //full on if under 47  top and bottom vibes mag belt scuppers open
				//Serial.println("FULL ON reached");
				PORTA = 4;
				analogWrite(CONTROLLINO_AO1, 255);
				break;
			case DUTY_CYCLE_75:  //from 47 - 48.5    7.5v to uppers, bottoms on DC75
				analogWrite(CONTROLLINO_AO1, 190);
				//Serial.println("DC75 reached");
				onCycleDuration = dutyPercent[1];
				offCycleDuration = dutyPercent[3];
				dutyCycleToggle();
				break;
			case DUTY_CYCLE_50:  //from 48.5-49.25   5v to uppers, bottoms to DC50
				analogWrite(CONTROLLINO_AO1, 127);
				//Serial.println("DC50 reached");
				onCycleDuration = dutyPercent[2];
				offCycleDuration = dutyPercent[2];
				dutyCycleToggle();
				break;
			case CLOSE_MAIN_SCUPPER:  // close main scupper
				//Serial.println("Close Main Scupper reached");
				PORTA = PORTA & B00000000;
				//while loop for last .75 pound maybe
				break;
			case DUTY_CYCLE_25:
				//Serial.println("DC25 reached");
				analogWrite(CONTROLLINO_AO1, 60);
				onCycleDuration = dutyPercent[3];
				offCycleDuration = dutyPercent[1];
				dutyCycleToggle();
				break;
			case DUMP_WEIGHT_REACHED_STOP_AND_SETTLE:
				Serial.println("Stop and Settle reached");
				dumpWeightReached = true;
				break;
			case 7:

			case 8:     //one CMH20 is .036 lbs
				Serial.println("Affirm Weight reached");
				dumping();
			}

	
}

void lcdDisplay() {

	lcd.setCursor(10, 1);            // move cursor to second line "1" and 9 spaces over
	if (scale.get_units() > 0.1) {
		lcd.print(scale.get_units(), 2);      // display seconds elapsed since power-up
	}
	else lcd.print("zero ");

	lcd.setCursor(0, 1);            // move to the begining of the second line
}
void loop()
{
	while (PINF >= 128) {   //while pin AI7 is HIGH 24v
		//Control State Machine
		PORTA = 0;  //shut off ONLY the vibrators

		Serial.println("Control State Machine Reached");
}
	//if (oneSecondTimer() == true) {
		//Serial.println(millis());
		//oneSecondStart = millis();
	//}
	lcdDisplay();
	determineState();
	runStateMachine();
	
	//if (determineState() != lastDetermineState) {
		//runStateMachine();
	//}
	
	
}

// how about changing weighing() to stateMachine and determineState would only call stateMachine when state changes
// if determineState != lastDetermineState stateMachine();  else return
// the stateMachines would be called from main loop but not IN main loop... THIS SHOULD BE FASTER!!!

// ALSO... lets experiment with the state being passed by pointer... can this be faster
// with this in mind could determine state create other pointers 
// ex. if weight is under 50 



//prototypes
int determineState();
void runStateMachine();
/*
determineState() {
	if (weight == 0) return 0;
	if (weight < 50) return 1;
	if (weight >= 50) return 3;
	else return 4;
}


runStateMachine() {
	switch (determineState())  //I would like this determineState to be the value associated at pointer location *determineState
	case 0:

	case 1: {

	}
	case 2: {

	}
	case 4:

}
*/
