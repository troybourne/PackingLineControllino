//Sample using LiquidCrystal library

#include <SPI.h>
#include <Controllino.h>
#include <LiquidCrystal.h>

#include <HX711.h>
/*******************************************************

This program will test the LCD panel and the buttons

********************************************************/

// select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

HX711 scale;
float calibration_factor = 39445.5;

// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5
const int DOUT = 17;
const int CLK = 16;
double weight = 0;
int dutyCycleTime = 8000;
bool floorVibeState = 0;
double dutyPercent[] = { 1.00, .75, .50, .25 };

void floorVibeDutyCycle();
	

// read the buttons
int read_LCD_buttons()
{
	adc_key_in = analogRead(0);      // read the value from the sensor 
	// my buttons when read are centered at these valies: 0, 144, 329, 504, 741
	// we add approx 50 to those values and check to see if we are close
	if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
	// For V1.1 us this threshold
	/*
	if (adc_key_in < 50)   return btnRIGHT;
	if (adc_key_in < 250)  return btnUP;
	if (adc_key_in < 450)  return btnDOWN;
	if (adc_key_in < 650)  return btnLEFT;
	if (adc_key_in < 850)  return btnSELECT;
   */
   // For V1.0 comment the other threshold and use the one below:

	if (adc_key_in < 50)   return btnRIGHT;
	if (adc_key_in < 195)  return btnUP;
	if (adc_key_in < 280)  return btnDOWN;
	if (adc_key_in < 350)  return btnLEFT;
	if (adc_key_in < 590)  return btnSELECT;
	return btnNONE;  // when all others fail, return this...
}



void setup()
{
	Serial.begin(9600);
	scale.begin(DOUT, CLK);
	int zero_factor = scale.read_average();
	Serial.print("zero factor: ");
	Serial.println(zero_factor);
	scale.set_scale(calibration_factor);
	Serial.print("calibration factor: ");
	Serial.println(calibration_factor);
	lcd.begin(16, 2);              // start the library
	lcd.setCursor(0, 0);
	lcd.print("Acorn's Awesome Packing Line"); // print a simple message
	//delay(150);
	for (int positionCounter = 0; positionCounter < 40; positionCounter++) {
		// scroll one position right:
		lcd.scrollDisplayLeft();
		// wait a bit:
		delay(50);
	}
	scale.tare();
	pinMode(CONTROLLINO_D0, OUTPUT);
	pinMode(CONTROLLINO_D1, OUTPUT);  // note that we are using CONTROLLINO aliases for the digital outputs
	pinMode(CONTROLLINO_D2, OUTPUT);
	pinMode(CONTROLLINO_D3, OUTPUT);  // the alias is always like CONTROLLINO_
	pinMode(CONTROLLINO_D4, OUTPUT);  // and the digital output label as you can see at the CONTROLLINO device
	pinMode(CONTROLLINO_D5, OUTPUT);  // next to the digital output screw terminal
	pinMode(CONTROLLINO_D6, OUTPUT);
	
}

void loop()
{
	
	//Serial.println(scale.get_units(), 3);
	lcd.setCursor(10, 1);            // move cursor to second line "1" and 9 spaces over
	if (scale.get_units() > 0.1) {
		lcd.print(scale.get_units(), 2);      // display seconds elapsed since power-up
	}
	else lcd.print("zero ");

	lcd.setCursor(0, 1);            // move to the begining of the second line
	lcd_key = read_LCD_buttons();  // read the buttons

	switch (lcd_key)               // depending on which button was pushed, we perform an action
	{
	case btnRIGHT:
	{
		lcd.print("RIGHT ");
		digitalWrite(CONTROLLINO_R0, HIGH);
		break;
	}
	case btnLEFT:
	{
		digitalWrite(CONTROLLINO_R0, LOW);
		// if You need the word "LEFT " shown on the display than use lcd.print("LEFT  ") instead of      lcd.print(adc_key_in) and lcd.print(" v");
		// the following 2 lines will print the actual threshold voltage present at analog input 0 ; As these buttons are part of a voltage divider, pressing each button creates a different threshold voltage 

		lcd.print("LEFT   "); // shows the actual threshold voltage at analog input 0
		lcd.print(" v"); // ends with v(olt) 
		break;
	}
	case btnUP:
	{
		lcd.print("UP    ");
		dutyPercent[1] = (dutyPercent[1] + .05);
		dutyPercent[2] = (dutyPercent[2] + .05);
		dutyPercent[3] = (dutyPercent[3] + .05);
		Serial.println(dutyPercent[1]);
		Serial.println(dutyPercent[2]);
		Serial.println(dutyPercent[3]);
		delay(200);
		break;
	}
	case btnDOWN:
	{
		lcd.print("DOWN  ");
		dutyPercent[1] = (dutyPercent[1] - .05);
		dutyPercent[2] = (dutyPercent[2] - .05);
		dutyPercent[3] = (dutyPercent[3] - .05);
		Serial.println(dutyPercent[1]);
		Serial.println(dutyPercent[2]);
		Serial.println(dutyPercent[3]);
		delay(200);
		break;
	}
	case btnSELECT:
	{
		lcd.print("SELECT");
		break;
	}
	case btnNONE:
	{
		lcd.print("TEST  ");
		break;
	}
	}

}
